package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotorSimple;            
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;

@TeleOp(name = "JakesTeleOp", group = "")
public class JakesTeleOp extends LinearOpMode {

  private DcMotor motor_drive_fl;
  private DcMotor motor_drive_bl;
  private DcMotor motor_drive_fr;
  private DcMotor motor_drive_br;
  private DcMotor LiftyMotor;
  private DcMotor WristMotor;
  public double fl_pow;
  public double fr_pow;
  public double bl_pow;
  public double br_pow;
  public double slowerModeLX = 0.8;
  public double slowerModeLY = 0.8;
  public double slowerModeRX = 0.8;
  public double[] smoothArrayLX = new double[100];
  public double[] smoothArrayLY = new double[100];
  public double[] smoothArrayRX = new double[100];
  double totalLX = 0.0;
  double totalLY = 0.0;
  double totalRX = 0.0;
  private Servo GrabberL;
  private Servo GrabberR;
  private Servo FoundationServoL;
  private Servo FoundationServoR;
  private boolean running;
  private boolean gamepad2LeftBumperLastState;  // remember what the bumper button's state was on the last scan
  private boolean FoundationServoEngaged;
  private int target;
  boolean tester = false;
    /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */

  public void runOpMode() {
    
    int LiftyMotorPosition;
    motor_drive_fl = hardwareMap.dcMotor.get("motor_drive_fl");
    motor_drive_bl = hardwareMap.dcMotor.get("motor_drive_bl");
    motor_drive_fr = hardwareMap.dcMotor.get("motor_drive_fr");
    motor_drive_br = hardwareMap.dcMotor.get("motor_drive_br");
    LiftyMotor = hardwareMap.dcMotor.get("LiftyMotor");
    WristMotor = hardwareMap.dcMotor.get("WristMotor");
    GrabberL = hardwareMap.servo.get("GrabberL");
    GrabberR = hardwareMap.servo.get("GrabberR");
    motor_drive_fr.setDirection(DcMotorSimple.Direction.REVERSE);
    motor_drive_fl.setDirection(DcMotorSimple.Direction.REVERSE);
    motor_drive_bl.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motor_drive_br.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motor_drive_fl.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    motor_drive_fr.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    LiftyMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    WristMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    LiftyMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    WristMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    GrabberR.setDirection(Servo.Direction.REVERSE);
    FoundationServoL = hardwareMap.servo.get("FoundationServoL");
    FoundationServoR = hardwareMap.servo.get("FoundationServoR");
    //FoundationServoR.setDirection(Servo.Direction.REVERSE);
    LiftyMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    LiftyMotor.setTargetPosition(0);
    LiftyMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    
    FoundationServoL.setPosition(0);
    FoundationServoR.setPosition(1);
    FoundationServoEngaged = false;
    gamepad2LeftBumperLastState = false;
    telemetry.addLine("works");
    telemetry.update();
    waitForStart();
    
    while (opModeIsActive()) {


        /*     *****FOUNDATION FUNCTIONS*****     */
        
        
        // Toggle foundation servos by catching the rising edge of left bumper... i.e. only when the button goes from not pressed to pressed,
        // otherwise, the servos will toggle rapidly between open and closed because the button will be scanned many times per second
        // while it is pressed
        
        if ((gamepad2.left_bumper) && (gamepad2LeftBumperLastState == false)){
            if (FoundationServoEngaged == false){
                FoundationServoL.setPosition(0);
                FoundationServoR.setPosition(1);
                FoundationServoEngaged = true;
            }
            else {
                FoundationServoL.setPosition(1);
                FoundationServoR.setPosition(0);
                FoundationServoEngaged = false;
            }
            
            gamepad2LeftBumperLastState = true;
        }
        if (!gamepad2.left_bumper && (gamepad2LeftBumperLastState == true)){
          gamepad2LeftBumperLastState = false;
        }

        
        /*     *****WRIST FUNCTIONS*****     */
        
        
        //general wrist operation functions and code
        
        if (gamepad2.x){
        // JAKE: Consider adding some way of detecting if we are at the end of travel so we don't stress the drivetrain unecessarily
          WristMotor.setPower(.20);
        }
        else if (gamepad2.b){
        // JAKE: Consider adding some way of detecting if we are at the end of travel so we don't stress the drivetrain unecessarily
          WristMotor.setPower(-.20);
        }
        else {
          WristMotor.setPower(0);
        }
        

/*      if (gamepad2.dpad_up && LiftyMotor.getCurrentPosition() <= 6500) {
            LiftyMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            target = (LiftyMotor.getCurrentPosition() + 839);
            running= true;
            LiftyMotor.setTargetPosition(target);
            LiftyMotor.setPower(-1);
          } else if (gamepad2.dpad_down && LiftyMotor.getCurrentPosition() >= 850) {
            LiftyMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            target = (LiftyMotor.getCurrentPosition() - 839);
            running = true;
            LiftyMotor.setTargetPosition(target);
            LiftyMotor.setPower(0.5);
          } else if ((gamepad2.left_stick_y >= 0.1 || gamepad2.left_stick_y <= -0.1)){
            target = LiftyMotor.getCurrentPosition();
            LiftyMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            LiftyMotor.setPower(-gamepad2.left_stick_y);
            running = true;
          } else if (!running && gamepad2.left_stick_y >= -0.1 && gamepad2.left_stick_y <= 0.1){
            LiftyMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LiftyMotor.setTargetPosition(target);
            LiftyMotor.setPower(0.75);
          } 
          else {
            LiftyMotorPosition = LiftyMotor.getCurrentPosition();
            LiftyMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LiftyMotor.setTargetPositon(LiftyMotorPosition);
            LiftyMotor.setPower(1);
            
          }
        
        if(Math.abs(target - LiftyMotor.getCurrentPosition()) >= 10){
          running = true;
        } else {
          running = false;
        }
*/
          // No presets, just keeping it simple by switching from speed control when moving and position control when stopped for LiftyMotor
          // Jake: Extend functionality later by adding block height presets.  Use LiftyMotor.isBusy() to tell if position control is ramping instead of 'running' variable
//          if (((gamepad2.left_stick_y <= -0.1) && (LiftyMotor.getCurrentPosition() <= 6100))){

          if (((gamepad2.left_stick_y <= -0.1) && (LiftyMotor.getCurrentPosition() <= 6650))){
            target = LiftyMotor.getCurrentPosition();
            LiftyMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            LiftyMotor.setPower(-gamepad2.left_stick_y);
          } 
          else if((gamepad2.left_stick_y) >= 0.1 && (LiftyMotor.getCurrentPosition() >= 50)){
            target = LiftyMotor.getCurrentPosition();
            LiftyMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            LiftyMotor.setPower(-gamepad2.left_stick_y * 0.5);
          }
          else if (gamepad2.left_stick_y >= -0.1 && gamepad2.left_stick_y <= 0.1){
            LiftyMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            LiftyMotor.setTargetPosition(target);
            LiftyMotor.setPower(0.5);
          }
          else if (LiftyMotor.getCurrentPosition() >= 6650){
              LiftyMotor.setPower(0);
              LiftyMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
              LiftyMotor.setTargetPosition(6650);
              LiftyMotor.setPower(0.5);

          }
          else if (LiftyMotor.getCurrentPosition() <= 50){
              LiftyMotor.setPower(0);
              LiftyMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
              LiftyMotor.setTargetPosition(50);
              LiftyMotor.setPower(0.5);
          }
          
          
        /*     *****GRABBER FUNCTIONS*****     */


        //sets the three different positions for the servos in order to best grab, move, and rotate blocks

        if (gamepad2.a) {
          GrabberR.setPosition(0.15);
          GrabberL.setPosition(0.15);
        } else if (gamepad2.y) {
            GrabberR.setPosition(0.20);
            GrabberL.setPosition(0.50);
        } else {
            GrabberR.setPosition(0.5);
            GrabberL.setPosition(0.5);
        }
        
        
        /*     *****DRIVETRAIN FUNCTIONS*****     */
        
        
        //Depending on the inputs, the driver can have the drivetrain run on smoothing, new smoothing, or standard drives
        
        if (gamepad1.a) {
            smoothing();
        } else if (gamepad1.right_bumper) {
            newSmoothing();
        } else {
            standardDrive();
        }
        
        normalizationDrive(fl_pow, fr_pow, bl_pow, br_pow);
        
                                      
        //right trigger flips motors
          
        if (gamepad1.right_trigger == 1) {
          motor_drive_fl.setPower(-motor_drive_fl.getPower());
          motor_drive_fr.setPower(-motor_drive_fr.getPower());
          motor_drive_br.setPower(-motor_drive_br.getPower());
          motor_drive_bl.setPower(-motor_drive_bl.getPower());
        }
        
        // Toggle Creep Mode with left trigger
        // For tweaking, disable the following 5 lines of code
        
        if (gamepad1.left_trigger >= 0.5) {
          slowerModeLX = 0.42;
          slowerModeLY = 0.15;
          slowerModeRX = 0.41;
        } else {
            slowerModeLX = 0.8;
            slowerModeLY = 0.8;
            slowerModeRX = 0.8;
        }
        
        // New tweaking of slowerMode in order to get the optimal settings for Kaleb
        /*
        if(gamepad1.dpad_left && tester){
          slowerMode -= 0.01;
          tester = false;
        } else if(gamepad1.dpad_right && tester){
          slowerMode += 0.01;
          tester = false;
        } else if(!gamepad1.dpad_right && !gamepad1.dpad_left){
          tester = true;
        }
        */
        //motor powering
          
        motor_drive_fl.setPower(fl_pow);
        motor_drive_fr.setPower(fr_pow);
        motor_drive_bl.setPower(bl_pow);
        motor_drive_br.setPower(br_pow);

        //standard telemetry updates to check on values in real time
        
        telemetry.addLine("Tele-Op is Green!");
        telemetry.addData("FL", motor_drive_fl.getPower());
        telemetry.addData("FR", motor_drive_fr.getPower());
        telemetry.addData("BL", motor_drive_bl.getPower());
        telemetry.addData("BR", motor_drive_br.getPower());
        //telemetry.addData("Tweaking Value ", slowerMode);
        telemetry.addLine("");
        telemetry.update();
        
      }  
  }
  
  
    /*     *****DRIVETRAIN ALGORITHMS*****     */
    
    
    //standard drive algorithm
  
    private void standardDrive(){
      
        fl_pow = (gamepad1.left_stick_y * slowerModeLY) - (gamepad1.left_stick_x * slowerModeLX) - (gamepad1.right_stick_x * slowerModeRX);
        bl_pow = (-gamepad1.left_stick_y * slowerModeLY) - (gamepad1.left_stick_x * slowerModeLX) + (gamepad1.right_stick_x * slowerModeRX);
        fr_pow = (-gamepad1.left_stick_y * slowerModeLY) - (gamepad1.left_stick_x * slowerModeLX) - (gamepad1.right_stick_x * slowerModeRX);
        br_pow = (gamepad1.left_stick_y * slowerModeLY) - (gamepad1.left_stick_x * slowerModeLX) + (gamepad1.right_stick_x * slowerModeRX);
        
    }
    
    //normalized standard drive algorithm
  
    private void normalizationDrive(double fl, double fr, double bl, double br) {
          if(Math.abs(fl) >= Math.abs(bl) && Math.abs(fl) >= Math.abs(fr) && Math.abs(fl) >= Math.abs(br) && Math.abs(fl) > 1){
            fl_pow = (fl / Math.abs(fl));
            fr_pow = (fr / Math.abs(fl));
            bl_pow = (bl / Math.abs(fl));
            br_pow = (br / Math.abs(fl));
          } 
         else if(Math.abs(bl) >= Math.abs(fl) && Math.abs(bl) >= Math.abs(fr) && Math.abs(bl) >= Math.abs(br) && Math.abs(bl) > 1){
            fl_pow = (fl / Math.abs(bl));
            fr_pow = (fr / Math.abs(bl));
            bl_pow = (bl / Math.abs(bl));
            br_pow = (br / Math.abs(bl));
         }
         else if(Math.abs(fr) >= Math.abs(fl) && Math.abs(fr) >= Math.abs(bl) && Math.abs(fr) >= Math.abs(br) && Math.abs(fr) > 1){
            fl_pow = (fl / Math.abs(fr));
            fr_pow = (fr / Math.abs(fr));
            bl_pow = (bl / Math.abs(fr));
            br_pow = (br / Math.abs(fr));
         }
         else if(Math.abs(br) >= Math.abs(bl) && Math.abs(br) >= Math.abs(fr) && Math.abs(br) >= Math.abs(fl) && Math.abs(br) > 1){
            fl_pow = (fl / Math.abs(br));
            fr_pow = (fr / Math.abs(br));
            bl_pow = (bl / Math.abs(br));
            br_pow = (br / Math.abs(br));
         }
       }
       
      //smoothed out driving algorithm (finer movement becomes finer, faster movement comes faster)
  
      private void smoothing(){
        double sLX = gamepad1.left_stick_x;
        double sLY = gamepad1.left_stick_y;
        double sRX = gamepad1.right_stick_x;
        
        if(Math.abs(gamepad1.left_stick_x) < 0.33){
            sLX = (sLX / 2);
          } 
         else if(Math.abs(gamepad1.left_stick_x) >= 0.33 && Math.abs(gamepad1.left_stick_x) < 0.67){
           if(gamepad1.left_stick_x > 0){
             sLX = (sLX - 0.16);
           }
           else{
             sLX = (sLX + 0.16);
           }
         }
         else if(Math.abs(gamepad1.left_stick_x) >= 0.67){
           if(gamepad1.left_stick_x > 0){
            sLX = (sLX * (3/2) - 0.50);
           }
           else{
            sLX = (sLX * (3/2) + 0.50);
           }
         }
         
         if(Math.abs(gamepad1.left_stick_y) < 0.33){
            sLY = (sLY / 2);
          } 
         else if(Math.abs(gamepad1.left_stick_y) >= 0.33 && Math.abs(gamepad1.left_stick_y) < 0.67){
           if(gamepad1.left_stick_y > 0){
             sLY = (sLY - 0.16);
           }
           else{
             sLY = (sLY + 0.16);
           }
         }
         else if(Math.abs(gamepad1.left_stick_y) >= 0.67){
           if(gamepad1.left_stick_y > 0){
            sLY = (sLY * (3/2) - 0.50);
           }
           else{
            sLY = (sLY * (3/2) + 0.50);
           }
         }
         
         if(Math.abs(gamepad1.right_stick_x) < 0.33){
            sRX = (sRX / 2);
          } 
         else if(Math.abs(gamepad1.right_stick_x) >= 0.33 && Math.abs(gamepad1.right_stick_x) < 0.67){
           if(gamepad1.right_stick_x > 0){
             sRX = (sRX - 0.16);
           }
           else{
             sRX = (sRX + 0.16);
           }
         }
         else if(Math.abs(gamepad1.right_stick_x) >= 0.67){
           if(gamepad1.right_stick_x > 0){
            sRX = (sRX * (3/2) - 0.50);
           }
           else{
            sRX = (sRX * (3/2) + 0.50);
           }
         }
         
         fl_pow = (sLY * slowerModeLY) - (sLX * slowerModeLX) - (sRX * slowerModeRX);
         bl_pow = (-sLY * slowerModeLY) - (sLX * slowerModeLX) + (sRX * slowerModeRX);
         fr_pow = (-sLY * slowerModeLY) - (sLX * slowerModeLX) - (sRX * slowerModeRX);
         br_pow = (sLY * slowerModeLY) - (sLX * slowerModeLX) + (sRX * slowerModeRX);
         
      }
      
      private void newSmoothing(){
          
        totalLX = 0;
        totalLY = 0;
        totalRX = 0;
        
        for(int i = (smoothArrayLX.length - 2); i >= 0; i--){
          smoothArrayLX[i] = smoothArrayLX[(i+1)];
          smoothArrayRX[i] = smoothArrayRX[(i+1)];
          smoothArrayLY[i] = smoothArrayLY[(i+1)];
        }
        
        smoothArrayLX[0] = gamepad1.left_stick_x;
        smoothArrayLY[0] = gamepad1.left_stick_y;
        smoothArrayRX[0] = gamepad1.right_stick_x;
        
        for(int i = 0; i < smoothArrayLX.length; i++){
          totalLX = totalLX + smoothArrayLX[i];
        }
        for(int i = 0; i < smoothArrayLY.length; i++){
          totalLY = totalLY + smoothArrayLY[i];
        }
        for(int i = 0; i < smoothArrayRX.length; i++){
          totalRX = totalRX + smoothArrayRX[i];
        }
        
        totalLX = totalLX / 100;
        totalLY = totalLY / 100;
        totalRX = totalRX / 100;
        
        totalLX = totalLX * 70;
        totalLY = totalLY * 70;
        totalRX = totalRX * 70;
        
        fl_pow = (totalLY * slowerModeLY) - (totalLX * slowerModeLX) - (totalRX * slowerModeRX);
        bl_pow = (-totalLY * slowerModeLY) - (totalLX * slowerModeLX) + (totalRX * slowerModeRX);
        fr_pow = (-totalLY * slowerModeLY) - (totalLX * slowerModeLX) - (totalRX * slowerModeRX);
        br_pow = (totalLY * slowerModeLY) - (totalLX * slowerModeLX) + (totalRX * slowerModeRX);
        
      }
    
  }
